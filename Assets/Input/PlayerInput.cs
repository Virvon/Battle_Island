//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace BattleIsland.Input
{
    public partial class @PlayerInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""7be829df-01c7-45aa-9a63-9c00d12923ab"",
            ""actions"": [
                {
                    ""name"": ""DownTouch"",
                    ""type"": ""Button"",
                    ""id"": ""ec1deb68-289b-4cd2-9c1d-746c8b189bea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.001,pressPoint=0.001)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpTouch"",
                    ""type"": ""Button"",
                    ""id"": ""02149202-adae-4d65-9879-43d0d89d9d81"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""SlowTap(duration=0.001)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""03283134-9ffd-49ac-acf5-890126e17f47"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""DownTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe1c93d8-649f-43ec-a5b0-babd9619de04"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""UpTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_DownTouch = m_Player.FindAction("DownTouch", throwIfNotFound: true);
            m_Player_UpTouch = m_Player.FindAction("UpTouch", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private IPlayerActions m_PlayerActionsCallbackInterface;
        private readonly InputAction m_Player_DownTouch;
        private readonly InputAction m_Player_UpTouch;
        public struct PlayerActions
        {
            private @PlayerInput m_Wrapper;
            public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @DownTouch => m_Wrapper.m_Player_DownTouch;
            public InputAction @UpTouch => m_Wrapper.m_Player_UpTouch;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
                {
                    @DownTouch.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDownTouch;
                    @DownTouch.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDownTouch;
                    @DownTouch.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDownTouch;
                    @UpTouch.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUpTouch;
                    @UpTouch.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUpTouch;
                    @UpTouch.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUpTouch;
                }
                m_Wrapper.m_PlayerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @DownTouch.started += instance.OnDownTouch;
                    @DownTouch.performed += instance.OnDownTouch;
                    @DownTouch.canceled += instance.OnDownTouch;
                    @UpTouch.started += instance.OnUpTouch;
                    @UpTouch.performed += instance.OnUpTouch;
                    @UpTouch.canceled += instance.OnUpTouch;
                }
            }
        }
        public PlayerActions @Player => new PlayerActions(this);
        private int m_MouseSchemeIndex = -1;
        public InputControlScheme MouseScheme
        {
            get
            {
                if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
                return asset.controlSchemes[m_MouseSchemeIndex];
            }
        }
        public interface IPlayerActions
        {
            void OnDownTouch(InputAction.CallbackContext context);
            void OnUpTouch(InputAction.CallbackContext context);
        }
    }
}
